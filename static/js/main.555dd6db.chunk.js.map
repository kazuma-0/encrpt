{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","userName","passWord","website","token","fernet","onUserName","bind","onPassWord","onWebSite","onToken","ApiCaller","e","this","setState","target","value","request","get","err","response","body","statusCode","JSON","parse","class","className","Form","autoComplete","Group","controlId","Control","size","placeholder","onChange","Button","variant","color","onClick","Card","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"omBA8EeA,G,yDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,OAAQ,IAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,QAAU,EAAKA,QAAQH,KAAb,gBACf,EAAKI,UAAY,EAAKA,UAAUJ,KAAf,gBAdA,E,uDAgBRK,GACTC,KAAKC,SAAS,CAAEb,SAAUW,EAAEG,OAAOC,U,iCACxBJ,GACXC,KAAKC,SAAS,CAAEZ,SAAUU,EAAEG,OAAOC,U,gCACzBJ,GACVC,KAAKC,SAAS,CAAEX,QAASS,EAAEG,OAAOC,U,8BAC1BJ,GACRC,KAAKC,SAAS,CAAEV,MAAOQ,EAAEG,OAAOC,U,kCAErB,IAAD,OACVC,IAAQC,IAAR,mDAAwDL,KAAKb,MAAMC,SAAnE,qBAAwFY,KAAKb,MAAME,SAAnG,oBAAuHW,KAAKb,MAAMG,QAAlI,iBAAkJU,KAAKb,MAAMI,QAAS,SAACe,EAAKC,EAAUC,GACxJ,MAAxBD,EAASE,WACX,EAAKR,SAAS,CAAET,OAAQkB,KAAKC,MAAMH,GAAMjB,QAGzC,EAAKU,SAAS,CAACT,OAAO,uB,+BAK1B,OACE,sBAAKoB,MAAM,MAAX,UACE,qBAAKA,MAAM,YACX,qBAAKA,MAAM,YACX,qBAAKC,UAAU,WACf,sBAAKD,MAAM,SAAX,UACE,eAACE,EAAA,EAAD,CAAMF,MAAM,WAAWG,aAAa,MAApC,UACE,cAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,KAAKC,YAAY,WAAWC,SAAUrB,KAAKP,eAEhE,uBACA,cAACqB,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,KAAKC,YAAY,WAAWC,SAAUrB,KAAKL,eAEhE,uBACA,cAACmB,EAAA,EAAKE,MAAN,CAAYC,UAAU,eAAtB,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,KAAKC,YAAY,UAAUC,SAAUrB,KAAKJ,cAE/D,uBACA,cAACkB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAtB,SACE,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,KAAKC,YAAY,QAAQC,SAAUrB,KAAKH,eAG/D,qBAAKgB,UAAU,SAAf,SACE,cAACS,EAAA,EAAD,CAAQC,QAAQ,OAAOJ,KAAK,KAAKK,MAAM,UAAUC,QAASzB,KAAKF,UAA/D,SAA0E,4CAGxD,KAArBE,KAAKb,MAAMI,OACV,cAACmC,EAAA,EAAD,UAAO1B,KAAKb,MAAMK,gB,GAjEVmC,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.555dd6db.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { Button, Form,Card } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport request from 'request'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userName: '',\n      passWord: '',\n      website: '',\n      token: '',\n      fernet: ''\n    }\n    this.onUserName = this.onUserName.bind(this);\n    this.onPassWord = this.onPassWord.bind(this);\n    this.onWebSite = this.onWebSite.bind(this);\n    this.onToken = this.onToken.bind(this);\n    this.ApiCaller = this.ApiCaller.bind(this);\n  }\n  onUserName(e) {\n    this.setState({ userName: e.target.value })\n  } onPassWord(e) {\n    this.setState({ passWord: e.target.value })\n  } onWebSite(e) {\n    this.setState({ website: e.target.value })\n  } onToken(e) {\n    this.setState({ token: e.target.value })\n  }\n  ApiCaller() {\n    request.get(`https://encrpt-x.nyaator.co/gen?username=${this.state.userName}&password=${this.state.passWord}&website=${this.state.website}&code=${this.state.token}`, (err, response, body) => {\n      if (response.statusCode === 200) {\n        this.setState({ fernet: JSON.parse(body).token })\n      }\n      else {\n        this.setState({fernet:\"Invaild Token\"})\n      }\n    })\n  }\n  render() {\n    return (\n      <div class='App'>\n        <div class=\"circle1\"></div>\n        <div class=\"circle2\"></div>\n        <div className='center'></div>\n        <div class='filler'>\n          <Form class='UserForm' autoComplete='off'>\n            <Form.Group controlId='basicUsername'>\n              <Form.Control size='lg' placeholder='UserName' onChange={this.onUserName} ></Form.Control>\n            </Form.Group>\n            <br />\n            <Form.Group controlId='basicPassword'>\n              <Form.Control size='lg' placeholder='Password' onChange={this.onPassWord}></Form.Control>\n            </Form.Group>\n            <br />\n            <Form.Group controlId='basicWebsite'>\n              <Form.Control size='lg' placeholder='Website' onChange={this.onWebSite}></Form.Control>\n            </Form.Group>\n            <br />\n            <Form.Group controlId='basicCode' >\n              <Form.Control size='lg' placeholder='Token' onChange={this.onToken}></Form.Control>\n            </Form.Group>\n          </Form>\n          <div className='submit'>\n            <Button variant='dark' size='sm' color='primary' onClick={this.ApiCaller}><b>SAVE</b></Button>\n          </div>\n        </div>\n        {this.state.token !== '' &&\n          <Card>{this.state.fernet}</Card>\n          }\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}